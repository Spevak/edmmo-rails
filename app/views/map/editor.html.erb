<html>
  <body>
    <!-- The dashboard is the outer container that wraps the three UI panels: map, interpreter, and output -->
    <div id="dashboard">

      <!-- The Map -->
      <div class="half" id="map">
	<div id="map-container"></div>
      </div>

      <!-- The right hand side containing the two text boxes -->
      <div class="half" id="terminals"> 
	<div id="tools">
	  <div class="tool" id="load_file">
	    Load a map block
	    <br>
	    x:
	    <input class="indexBox" type="text" id="load_x">
	    y:
	    <input class="indexBox" type="text" id="load_y">
	    <button type="submit" id="load"> Load </button>
	  </div>
	  <div class="tool" id="tile_select">
	    Select a tile to use
	    <br>
	    <select id="tile" onchange="currentTileType = + this.value">
	    </select>
	  </div>
	  <div class="tool" id="save_file">
	    Save as
	    <br>
	    x:
	    <input class="indexBox" type="text" id="save_x">
	    y:
	    <input class="indexBox" type="text" id="save_y">
	    <button type="submit" id="save"> Save </button>
	  </div>
	</div>

        <!-- Other javascripts that load because of how rails handles assets will fail if the log or
	     interactive elements are not here, so we'll just hide them.  -->
	<div class="terminal" id="log">
	  <ul id="log-text"></ul>
	</div> 
	<div id="hiddenShell">   
	  <textarea id="interactive" cols="85" rows="1"></textarea>
	</div>
      </div>

    </div>
  </body>
  <script type="text/javascript">

      //hide the elements that are used in the splash page
      $('#hiddenShell').hide();
      $('#log').hide();

      //What tile we're currently drawing on the map
      var currentTileType = -1;

    //poplulate the tile options dropdown bar
      $('#tile').append("<option value=-1>" + tileChars[50] + "  (no tile)</option>");
    for (tileId in tileChars) {
      $('#tile').append("<option value='" + tileId.toString() + "'>" + tileChars[tileId] + " </option>");
    }

    //Make a request to load a file
    $("#load").click(function() {
      //var filename = $('#fileToLoad').value;
      //var coordinates = filename.split('-');
      var x = $('#load_x').val();
      var y = $('#load_y').val();
      $('#save_x').val(x);
      $('#save_y').val(y);
      $.ajax({
        type:"POST",
        url:"load",
        data: JSON.stringify( {x:x, y:y}),
        contentType: "application/json",
        dataType: "json",
        success: parseJson,
        error: function(e){}
      });
      
    });

    // Parse the json representation of a map block and save it to mapdata
    var parseJson = function(json) {
      //start off by filling the map with undefined tiles to be overwritten by anything that gets returned
      for (var i = -MAP_MAX_INDEX; i <= MAP_MAX_INDEX; i++) {
	for (var j = -MAP_MAX_INDEX; j <= MAP_MAX_INDEX; j++) {
          Bq.mapData.setTile(i, j, -1);
        }
      }
      tiles = json.tiles;
      for (index in tiles) {
        tile = tiles[index];
	//have to subtract map max index from coordinates so that (0, 0) is in bottom left corner instead of center
        Bq.mapData.setTile(tile.x-MAP_MAX_INDEX, tile.y-MAP_MAX_INDEX, tile.id);
        //console.log("x: " + tile.x + ", y: " + tile.y + ", id: " + tile.id);
        alert("(" + tile.x.toString() + ", " + tile.y.toString() + ")");
      }
      Bq.renderMap(Bq.Map.getIndices());
    }

    $('#save').click(function() {
      var tilesList = []
      var id
      for (var x = 0; x<= Bq.mapData.n; x++) {
        for (var y = 0; y<= Bq.mapData.n; y++) {
          //need to subtract map max index to get 0,0 in center of map
	  id = Bq.mapData.tileAt(x-MAP_MAX_INDEX, y-MAP_MAX_INDEX);
          //don't bother saving tiles that are undefined.
          if (id != -1 && id != 50) {
            tilesList.push({x:x, y:y, id:id});
          }
        }
      }
      //reuse x and y vars for the position of the block being saved
      x = $('#save_x').val();
      y = $('#save_y').val();
      jsonData = JSON.stringify({x:x, y:y, tiles:tilesList});
      
      //make the request
      $.ajax({
        type: "POST",
	url: "save",
        data: jsonData,
        contentType: "application/json",
        dataType: "json",
        success: function(result){},
        error: function(e){}
      });
    });
  </script>
</html>
